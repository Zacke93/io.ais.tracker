'use strict';

const RealAppTestRunner = require('./RealAppTestRunner');

/**
 * CONTROLLED NORTH TO SOUTH JOURNEY TEST
 *
 * üéØ EXAKT KONTROLLERAT TEST f√∂r manuell verifiering
 *
 * Detta test √§r designat f√∂r att du ska kunna f√∂lja varje steg manuellt:
 * 1. Fartyg startar precis innanf√∂r bounding box
 * 2. Sedan exakt 600m, 450m, 250m, 45m fr√•n varje bro
 * 3. Slutligen 55m framf√∂r bro (passerat)
 *
 * KRITISKT: Testet anv√§nder 100% verklig app.js-logik via RealAppTestRunner
 * - Inga simulerade resultat
 * - Inga h√•rdkodade bridge text-svar
 * - Alla meddelanden kommer fr√•n den riktiga BridgeTextService
 * - Alla statusar kommer fr√•n den riktiga StatusService
 * - Alla avst√•ndsber√§kningar kommer fr√•n den riktiga ProximityService
 *
 * AVST√ÖNDSTRIGGRAR (fr√•n constants.js):
 * - 500m: APPROACHING_RADIUS - "n√§rmar sig" meddelanden
 * - 300m: APPROACH_RADIUS - "inv√§ntar bro√∂ppning" meddelanden
 * - 50m:  UNDER_BRIDGE_DISTANCE - "bro√∂ppning p√•g√•r" meddelanden
 */

async function controlledNorthToSouthJourney() {
  console.log('\nüéØ CONTROLLED NORTH TO SOUTH JOURNEY TEST');
  console.log('='.repeat(70));
  console.log('üìã MANUELL VERIFIERING - F√∂lj varje steg noggrant');
  console.log('üîÑ 100% verklig app.js-logik - inga simulerade resultat');
  console.log('üìè Exakta avst√•nd: Bounding box ‚Üí 600m ‚Üí 450m ‚Üí 250m ‚Üí 45m ‚Üí 55m framf√∂r');
  console.log('='.repeat(70));

  const runner = new RealAppTestRunner();

  // VERKLIGA KOORDINATER fr√•n constants.js BRIDGES
  const BRIDGE_COORDS = {
    stallbackabron: { lat: 58.31142992293701, lon: 12.31456385688822 },
    stridsbergsbron: { lat: 58.293524096154634, lon: 12.294566425158054 },
    jarnvagsbron: { lat: 58.29164042152742, lon: 12.292025280073759 },
    klaffbron: { lat: 58.28409551543077, lon: 12.283929525245636 },
    olidebron: { lat: 58.272743083145855, lon: 12.275115821922993 },
  };

  // BOUNDING BOX fr√•n constants.js AIS_CONFIG
  const BOUNDING_BOX = {
    NORTH: 58.32,
    SOUTH: 58.26,
    EAST: 12.32,
    WEST: 12.26,
  };

  /**
   * Ber√§kna exakt GPS-koordinat p√• specificerat avst√•nd norr om en bro
   * Anv√§nder samma matematik som app.js anv√§nder f√∂r avst√•ndsber√§kningar
   */
  function calculatePositionNorthOfBridge(bridgeCoords, distanceMeters) {
    // Approximation: 1 grad lat ‚âà 111000m, 1 grad lon ‚âà 56000m (vid Sverige)
    const metersPerLatDegree = 111000;
    const latOffset = distanceMeters / metersPerLatDegree;

    return {
      lat: bridgeCoords.lat + latOffset,
      lon: bridgeCoords.lon, // Samma longitud, bara norr om
    };
  }

  const controlledJourneySteps = [

    // === STEG 1: Precis innanf√∂r bounding box ===
    {
      description: 'üö¢ STEG 1: Fartyg precis innanf√∂r NORTH bounding box (58.32¬∞)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        lat: BOUNDING_BOX.NORTH - 0.001, // 58.319 - precis innanf√∂r
        lon: 12.315, // Mitt i bounding box longitudwise
        sog: 4.0, // Konstant hastighet f√∂r f√∂ruts√§gbarhet
        cog: 180, // Rakt s√∂derut
      }],
      analysisNote: 'Fartyget ska uppt√§ckts av systemet och f√• en m√•lbro tilldelad baserat p√• COG 180¬∞ (s√∂derut)',
      expectedBehavior: 'COG 180¬∞ = s√∂derut ‚Üí ska f√• Stridsbergsbron som m√•lbro (f√∂rsta m√•lbro s√∂derut)',
    },

    // === STEG 2: 600m norr om Stallbackabron ===
    {
      description: 'üåâ STEG 2: 600m norr om Stallbackabron (mellanbro)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stallbackabron, 600),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '600m > 500m APPROACHING_RADIUS - ska visa "p√• v√§g mot" meddelande',
      expectedBehavior: 'Stallbackabron √§r mellanbro, m√•lbro fortfarande Stridsbergsbron. Meddelande: "p√• v√§g mot Stridsbergsbron"',
    },

    // === STEG 3: 450m norr om Stallbackabron ===
    {
      description: 'üåâ STEG 3: 450m norr om Stallbackabron (inom APPROACHING_RADIUS)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stallbackabron, 450),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '450m < 500m APPROACHING_RADIUS - KRITISK: Stallbackabron specialhantering!',
      expectedBehavior: 'Stallbackabron special: "En b√•t n√§rmar sig Stallbackabron" ELLER "vid Stallbackabron n√§rmar sig Stridsbergsbron"',
    },

    // === STEG 4: 250m norr om Stallbackabron ===
    {
      description: 'üåâ STEG 4: 250m norr om Stallbackabron (inom APPROACH_RADIUS)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stallbackabron, 250),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '250m < 300m APPROACH_RADIUS - KRITISK: Stallbackabron f√•r ALDRIG "inv√§ntar bro√∂ppning"!',
      expectedBehavior: 'Stallbackabron special: "√•ker strax under Stallbackabron" INTE "inv√§ntar bro√∂ppning"',
    },

    // === STEG 5: 45m norr om Stallbackabron ===
    {
      description: 'üåâ STEG 5: 45m norr om Stallbackabron (inom UNDER_BRIDGE_DISTANCE)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stallbackabron, 45),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '45m < 50m UNDER_BRIDGE_DISTANCE - under-bridge status',
      expectedBehavior: 'Stallbackabron special: "En b√•t passerar Stallbackabron" INTE "bro√∂ppning p√•g√•r"',
    },

    // === STEG 6: 55m s√∂der om Stallbackabron (passerat) ===
    {
      description: 'üåâ STEG 6: 55m s√∂der om Stallbackabron (passerat)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        lat: BRIDGE_COORDS.stallbackabron.lat - (55 / 111000), // 55m s√∂der om
        lon: BRIDGE_COORDS.stallbackabron.lon,
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: 'Fartyg har passerat Stallbackabron - ska √•terg√• till normal logik',
      expectedBehavior: '"En b√•t p√• v√§g mot Stridsbergsbron" - Stallbackabron specialhantering ska upph√∂ra',
    },

    // === STEG 7: 600m norr om Stridsbergsbron (m√•lbro) ===
    {
      description: 'üéØ STEG 7: 600m norr om Stridsbergsbron (M√ÖLBRO)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stridsbergsbron, 600),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '600m > 500m fr√•n M√ÖLBRO - ska visa "p√• v√§g mot" med ETA',
      expectedBehavior: '"En b√•t p√• v√§g mot Stridsbergsbron, ber√§knad bro√∂ppning om X minuter"',
    },

    // === STEG 8: 450m norr om Stridsbergsbron ===
    {
      description: 'üéØ STEG 8: 450m norr om Stridsbergsbron (APPROACHING_RADIUS)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stridsbergsbron, 450),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '450m < 500m fr√•n M√ÖLBRO - ska visa "n√§rmar sig"',
      expectedBehavior: '"En b√•t n√§rmar sig Stridsbergsbron" ELLER med ETA om systemet ber√§knar det',
    },

    // === STEG 9: 250m norr om Stridsbergsbron ===
    {
      description: 'üéØ STEG 9: 250m norr om Stridsbergsbron (APPROACH_RADIUS)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stridsbergsbron, 250),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '250m < 300m fr√•n M√ÖLBRO - ska visa "inv√§ntar bro√∂ppning"',
      expectedBehavior: '"En b√•t inv√§ntar bro√∂ppning vid Stridsbergsbron" (UTAN ETA f√∂r m√•lbro)',
    },

    // === STEG 10: 45m norr om Stridsbergsbron ===
    {
      description: 'üéØ STEG 10: 45m norr om Stridsbergsbron (UNDER_BRIDGE_DISTANCE)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        ...calculatePositionNorthOfBridge(BRIDGE_COORDS.stridsbergsbron, 45),
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: '45m < 50m fr√•n M√ÖLBRO - ska visa "bro√∂ppning p√•g√•r"',
      expectedBehavior: '"Bro√∂ppning p√•g√•r vid Stridsbergsbron" (h√∂gsta prioritet)',
    },

    // === STEG 11: 55m s√∂der om Stridsbergsbron (passerat m√•lbro) ===
    {
      description: 'üéØ STEG 11: 55m s√∂der om Stridsbergsbron (passerat M√ÖLBRO)',
      vessels: [{
        mmsi: '265CONTROL',
        name: 'M/V KONTROLL',
        lat: BRIDGE_COORDS.stridsbergsbron.lat - (55 / 111000), // 55m s√∂der om
        lon: BRIDGE_COORDS.stridsbergsbron.lon,
        sog: 4.0,
        cog: 180,
      }],
      analysisNote: 'KRITISK: Fartyg har passerat sin m√•lbro - target bridge transition!',
      expectedBehavior: 'Ny m√•lbro: Klaffbron (n√§sta s√∂derut). "En b√•t har precis passerat Stridsbergsbron p√• v√§g mot Klaffbron"',
    },

    // === STEG 12: Cleanup test ===
    {
      description: 'üßπ STEG 12: Fartyg f√∂rsvinner (cleanup test)',
      vessels: [], // Inga fartyg
      analysisNote: 'System ska √•terg√• till default-meddelande',
      expectedBehavior: '"Inga b√•tar √§r i n√§rheten av Klaffbron eller Stridsbergsbron"',
    },
  ];

  try {
    console.log(`\nüöÄ Startar kontrollerat test med ${controlledJourneySteps.length} exakta steg...\n`);

    const results = await runner.runRealJourney(
      'CONTROLLED NORTH TO SOUTH JOURNEY',
      controlledJourneySteps,
    );

    // MANUELL VERIFIERINGSGUIDE
    console.log('\nüìã MANUELL VERIFIERINGSGUIDE:');
    console.log('='.repeat(50));
    console.log('F√∂r varje steg ovan, kontrollera att:');
    console.log('1. üìç Position: GPS-koordinater √§r korrekta relativt broarna');
    console.log('2. üéØ M√•lbro: Korrekt m√•lbro tilldelad baserat p√• COG och position');
    console.log('3. üìä Status: Korrekt status baserat p√• avst√•nd (en-route/approaching/waiting/under-bridge/passed)');
    console.log('4. üí¨ Bridge Text: Meddelande matchar f√∂rv√§ntad behavior');
    console.log('5. üåâ Stallbackabron: Specialhantering fungerar (ALDRIG "inv√§ntar bro√∂ppning")');
    console.log('6. üîÑ Target Transition: M√•lbro v√§xlar fr√•n Stridsbergsbron ‚Üí Klaffbron efter passage');

    // KRITISKA KONTROLLPUNKTER
    console.log('\nüîç KRITISKA KONTROLLPUNKTER:');
    console.log('='.repeat(50));
    console.log('‚úÖ STEG 1: M√•lbro assignment (COG 180¬∞ ‚Üí Stridsbergsbron)');
    console.log('‚úÖ STEG 3-5: Stallbackabron specialhantering (ej "inv√§ntar bro√∂ppning")');
    console.log('‚úÖ STEG 8: 500m rule - "n√§rmar sig" trigger');
    console.log('‚úÖ STEG 9: 300m rule - "inv√§ntar bro√∂ppning" trigger');
    console.log('‚úÖ STEG 10: 50m rule - "bro√∂ppning p√•g√•r" trigger');
    console.log('‚úÖ STEG 11: Target bridge transition efter passage');

    console.log('\nüìê GPS-KOORDINATER ANV√ÑNDA:');
    console.log('='.repeat(50));
    controlledJourneySteps.forEach((step, index) => {
      if (step.vessels.length > 0) {
        const vessel = step.vessels[0];
        console.log(`STEG ${index + 1}: lat=${vessel.lat?.toFixed(6)}, lon=${vessel.lon?.toFixed(6)}`);
      }
    });

    return results;

  } catch (error) {
    console.error('‚ùå Controlled North to South Journey failed:', error);
    throw error;
  } finally {
    await runner.cleanup();
  }
}

// Export for use by other modules
module.exports = controlledNorthToSouthJourney;

// Run test if called directly
if (require.main === module) {
  controlledNorthToSouthJourney()
    .then(() => {
      console.log('\nüéâ Controlled North to South Journey completed!');
      console.log('üìã Review the output above for manual verification');
    })
    .catch((error) => {
      console.error('\nüí• Controlled North to South Journey failed:', error);
      throw error;
    });
}
